/*
This file create a Database with data on Cryptocurrencies from coinmarketcap.com and Manipulates the data

This file demonstrates the following commands
USE database
CREATE, DELETE, ALTER, TRUNCATE Table
CREATE and ADD PRIMARY keys and FOREIGN Keys
CREATE Views using INNER JOIN and CROSS JOIN
INNER JOIN, OUTER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN and CROSS JOIN statements
ORDER BY
SELECT, INSERT, UPDADTE, DELETE rows
COUNT(), AVG() and SUM() Functions
DISTINCT statement
CASE ... WHEN ... THEN ... ELSE statement
BEGIN TRAN, COMMIT, ROLL BACK, EXECUTE, SAVEPOINT, RELEASE SAVEPOINT
SET NOCOUNT ON, SET NOCOUNT OFF
User Defined Procedures
Built-in Procedures
Built-in Functions
SET PERMISSIONS using GRANT, DENY, REVOKE
CREATE New Users
CREATE and Set database roles
Set server roles
*/

USE Cryptocurrency

-- Create 1 table for top 10 cryptocurrencies listed on coinmarketcap.com

CREATE table [Top 10 Crypto](
	Ranking INT NOT NULL,
	Symbol nvarchar (50) NOT NULL,
	Price decimal (20,2),
	Marketcap decimal (20,2),
	TotalSupply decimal (20,2),
	);
GO

-- Add PRIMARY KEY based on the Symbol column

ALTER TABLE [Top 10 Crypto]
ADD CONSTRAINT PK_Coin PRIMARY KEY (Symbol);

-- Create 1 table for Sample Portfolio

CREATE table Portfolio(
	Ranking INT NOT NULL,
	Symbol nvarchar (50) NOT NULL,
	Amount INT NULL,
	[Purchase Price] decimal (20,2),
	[Selling Price] decimal (20,2),
);
GO

-- Add foreign key
ALTER TABLE Portfolio
ADD CONSTRAINT FK_Coin
FOREIGN KEY (Symbol) REFERENCES [Top 10 Crypto](Symbol);

-- Create 1 table for De-Fi (Decentralized Finanace) Coins listed on coinmarketcap.com

CREATE table [De-Fi](
	Ranking INT NOT NULL,
	Symbol nvarchar (50) PRIMARY Key NOT NULL,
	Price decimal (20,2),
	Marketcap decimal (20,2),
	TotalSupply decimal (20,2),
	);
GO

-- INSERT VALUES INTO table [Top 10 Crypto]
-- Price is in USD
-- Marketcap is in Billions
-- TotalSupply is in Millions

INSERT INTO [Top 10 Crypto] VALUES (1, 'BTC', 18321.69, 340.12, 18.57);

INSERT INTO [Top 10 Crypto](Ranking, Symbol, Price, Marketcap, TotalSupply)
VALUES (2, 'ETH', 553.89, 63.12, 113.80),
(3, 'XRP', 0.53, 24.12, 45404.03);

INSERT INTO [Top 10 Crypto] VALUES (4, 'USDT', 1.00, 19.83, 19817);

INSERT INTO [Top 10 Crypto](Ranking, Symbol, Price, Marketcap, TotalSupply)
VALUES (5, 'BCH', 264.8, 1.92, 18.57),
(6, 'LTC', 74.66, 4.93, 66.07),
(7, 'LINK', 12.06, 4.78, 396.51),
(8, 'ADA', 0.15, 4.53, 311112.48),
(9, 'DOT', 4.74, 4.2, 886.96),
(10, 'BNB', 27.80, 4.01, 144.41);

SELECT * FROM [Top 10 Crypto];
SELECT * FROM [Top 10 Crypto] ORDER BY Ranking;

-- INSERT VALUES INTO table [De-Fi]
-- Price is in USD
-- Marketcap is in Billions
-- TotalSupply is in Millions

INSERT INTO [De-Fi] (Ranking, Symbol, Price, Marketcap, TotalSupply)
VALUES (1, 'LINK', 12.06, 4.78, 396.51),
(2, 'WBTC', 18321.69, 2.13, 0.12),
(3, 'DAI', 1.00, 1.07, 1063.63),
(4, 'AAVE', 77.97, 0.93, 11.97),
(5, 'UNI', 3.12, 0.78, 251.70);

SELECT * FROM [De-Fi];
SELECT * FROM [De-Fi] ORDER BY TotalSupply;

-- INSERT VALUES INTO table Sample_Portfolio
-- Price is in USD

INSERT INTO Portfolio (Ranking, Symbol, Amount, [Purchase Price], [Selling Price])
VALUES (1, 'BTC', 0.7, 8000, 1000000),
(2, 'ETH', 1, 250, 15000),
(3, 'ADA', 17000, 0.12, 40),
(4, 'XLM', 3300, 0.4, 20),
(5, 'EOS', 247, 12.5, 1000);

-- CREATE a VIEWS using INNER JOIN and CROSS JOIN

CREATE VIEW CoinMatch AS
SELECT [Top 10 Crypto].Ranking, [Top 10 Crypto].Marketcap, [Top 10 Crypto].Symbol
FROM [Top 10 Crypto]
INNER JOIN Portfolio ON [Top 10 Crypto].Symbol = Portfolio.Symbol;

SELECT * FROM CoinMatch;

CREATE VIEW CoinMatch2 AS
SELECT [Top 10 Crypto].Ranking, [Top 10 Crypto].Marketcap, [Top 10 Crypto].Symbol
FROM [Top 10 Crypto] CROSS JOIN Portfolio;

SELECT * FROM CoinMatch2;

CREATE VIEW CoinMatch3 AS
SELECT [Top 10 Crypto].Ranking, [Top 10 Crypto].Symbol
FROM [Top 10 Crypto]
INNER JOIN Portfolio ON [Top 10 Crypto].Symbol = Portfolio.Symbol;

SELECT * FROM CoinMatch3;

-- SELECT using LEFT and RIGHT OUTER JOIN and ORDER BY ASC and DSC

SELECT [Top 10 Crypto].Ranking, [Top 10 Crypto].Marketcap, [Top 10 Crypto].Symbol
FROM [Top 10 Crypto]
LEFT OUTER JOIN Portfolio ON [Top 10 Crypto].Symbol = Portfolio.Symbol
ORDER BY [Top 10 Crypto].Ranking ASC;

SELECT [Top 10 Crypto].Ranking, [Top 10 Crypto].Marketcap, [Top 10 Crypto].Symbol
FROM [Top 10 Crypto]
RIGHT OUTER JOIN Portfolio ON [Top 10 Crypto].Symbol = Portfolio.Symbol
ORDER BY [Top 10 Crypto].Ranking DESC;

-- COUNT, AVG, SUM Functions

SELECT COUNT(Symbol)
FROM [Top 10 Crypto]
WHERE Price > 300;

SELECT AVG(Price)
FROM [Top 10 Crypto]
WHERE Ranking < 5;

SELECT SUM(Marketcap)
FROM [Top 10 Crypto]
WHERE Symbol <> 'BTC';

-- DISTINCT

SELECT DISTINCT Symbol
FROM [De-Fi];

-- CASE ... WHEN ... THEN ... ELSE statement

SELECT * FROM [Top 10 Crypto];

SELECT Symbol, Ranking, Marketcap,
CASE
	WHEN Marketcap > 100 THEN 'The Marketcap of this coin is greater than $100 billion'
	WHEN Marketcap < 100 AND Marketcap >= 60 THEN 'The Marketcap of this coin is greater than $60 billion but less than $100 billion'
	WHEN Marketcap < 60 AND Marketcap >= 10 THEN 'The Marketcap of this coin is greater than $10 billion but less than $60 billion'
	ELSE 'The Marketcap of this coin is less than $10 billion'
END AS Comparison
FROM [Top 10 Crypto];

-- BEGIN TRAN, COMMIT, ROLL BACK, EXECUTE, SAVE POINT

BEGIN TRAN
DELETE FROM [Top 10 Crypto]
WHERE Symbol = 'DOT';
COMMIT;
ROLLBACK;

SELECT * FROM [Top 10 Crypto]

INSERT INTO [Top 10 Crypto] VALUES (9, 'DOT', 4.74, 4.2, 886.86)
INSERT INTO [Top 10 Crypto] VALUES (10, 'BNB', 27.80, 4.01, 144.41)

SELECT * FROM [Top 10 Crypto] ORDER BY Ranking;

SELECT * FROM Portfolio;

DELETE FROM Portfolio WHERE Ranking = 1;
ROLLBACK;

SAVEPOINT SP1;
DELETE FROM Portfolio WHERE Ranking = 1;
SAVEPOINT SP2;
DELETE FROM Portfolio WHERE Ranking = 5;
SAVEPOINT SP3;
DELETE FROM Portfolio WHERE Ranking = 3;
ROLLBACK TO SP1;

TRUNCATE table [Top 10 Crypto]
DELETE [Top 10 Crypto]

TRUNCATE table [De-Fi]
DELETE [De-Fi]

TRUNCATE table Portfolio
DELETE Portfolio

-- the end
